const express = require('express');
const app = express();
const port = 3000;

const mariadb = require('mariadb');
const pool = mariadb.createPool({
  host: 'localhost',
  user: 'root',
  password: 'root',
  database: 'sample',
  port: 3306,
  connectionLimit: 10
});

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');

const options = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Personal Budget API',
      version: '1.0.0',
      description: 'Personal Budget API autogenerated by swagger-jsdoc',
    },
    servers: [
      {
        url: 'http://167.172.241.71:3000', 
      },
    ],
  },
  apis: ['./server.js'],
};


const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(express.json());
app.use(cors());

app.get('/customers', async (req, res) => {
  let conn;
  conn = await pool.getConnection();
  const rows = await conn.query('SELECT CUST_NAME, CUST_COUNTRY FROM customer');
  res.setHeader('Content-Type', 'application/json');
  res.json(rows);
});

/**
 * @swagger
 * /customers:
 *   get:
 *     description: Returns customer names and countries from the database
 *     produces:
 *         - application/json
 *     responses:
 *       200:
 *         description: A list of customers
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   CUST_NAME:
 *                     type: string
 *                   CUST_COUNTRY:
 *                     type: string
 */

app.get('/orders', async (req, res) => {
  let conn;
  conn = await pool.getConnection();
  const rows = await conn.query('SELECT * FROM orders WHERE ORD_AMOUNT > 600.00');
  res.setHeader('Content-Type', 'application/json');
  res.json(rows);
});

/**
 * @swagger
 * /orders:
 *   get:
 *     description: Returns all orders where the order amount is greater than 600.00
 *     produces:
 *         - application/json
 *     responses:
 *       200:
 *         description: A list of high-value orders
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   ORD_NUM:
 *                     type: integer
 *                   ORD_AMOUNT:
 *                     type: number
 *                   ADVANCE_AMOUNT:
 *                     type: number
 *                   ORD_DATE:
 *                     type: string
 *                     format: date
 *                   CUST_CODE:
 *                     type: string
 *                   AGENT_CODE:
 *                     type: string
 *                   ORD_DESCRIPTION:
 *                     type: string
 */

app.get('/foods', async (req, res) => {
  let conn;
  conn = await pool.getConnection();
  const rows = await conn.query('SELECT * FROM foods');
  res.setHeader('Content-Type', 'application/json');
  res.json(rows);
});

app.post('/foods', async (req, res) => {
  const { ITEM_ID, ITEM_NAME, ITEM_UNIT, COMPANY_ID } = req.body;

  if (!ITEM_ID || !ITEM_NAME) {
    return res.status(400).json({ error: 'ITEM_ID and ITEM_NAME are required' });
  }

    let conn;
    conn = await pool.getConnection();
    await conn.query(
      `INSERT INTO foods (ITEM_ID, ITEM_NAME, ITEM_UNIT, COMPANY_ID) VALUES (?, ?, ?, ?)`,
      [
        ITEM_ID.trim(),
        ITEM_NAME.trim(),
        ITEM_UNIT ? ITEM_UNIT.trim() : null,
        COMPANY_ID ? COMPANY_ID.trim() : null
      ]
    );
    res.status(201).json({ message: 'Food item added successfully' });
});

/**
 * @swagger
 * /foods:
 *   get:
 *     description: Returns a list of all food items from the database
 *     produces:
 *         - application/json
 *     responses:
 *       200:
 *         description: A list of food items
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   ITEM_ID:
 *                     type: string
 *                   ITEM_NAME:
 *                     type: string
 *                   ITEM_UNIT:
 *                     type: string
 *                   COMPANY_ID:
 *                     type: string
 *
 *   post:
 *     description: Creates a new food item with the given details
 *     produces:
 *         - application/json
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - ITEM_ID
 *               - ITEM_NAME
 *             properties:
 *               ITEM_ID:
 *                 type: string
 *               ITEM_NAME:
 *                 type: string
 *               ITEM_UNIT:
 *                 type: string
 *               COMPANY_ID:
 *                 type: string
 *     responses:
 *       201:
 *         description: Food item added successfully
 */

app.put('/foods/:id', async (req, res) => {
  const { id } = req.params;
  const { ITEM_NAME, ITEM_UNIT, COMPANY_ID } = req.body;

  if (!ITEM_NAME || !ITEM_UNIT || !COMPANY_ID) {
    return res.status(400).json({ error: 'ITEM_NAME, ITEM_UNIT, and COMPANY_ID are required' });
  }

  let conn;
    conn = await pool.getConnection();
    await conn.query(
      `UPDATE foods SET ITEM_NAME=?, ITEM_UNIT=?, COMPANY_ID=? WHERE ITEM_ID=?`,
      [ITEM_NAME.trim(), ITEM_UNIT.trim(), COMPANY_ID.trim(), id]
    );
    res.json({ message: `Food item ${id} updated successfully` });
});

/**
 * @swagger
 * /foods/{id}:
 *   put:
 *     description: Fully updates a food item by its ID
 *     produces:
 *         - application/json
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: The ID of the food item
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - ITEM_NAME
 *               - ITEM_UNIT
 *               - COMPANY_ID
 *             properties:
 *               ITEM_NAME:
 *                 type: string
 *               ITEM_UNIT:
 *                 type: string
 *               COMPANY_ID:
 *                 type: string
 *     responses:
 *       200:
 *         description: Food item updated successfully
 */

app.patch('/foods/:id', async (req, res) => {
  const { id } = req.params;
  const updates = req.body;

  if (!Object.keys(updates).length) {
    return res.status(400).json({ error: 'No fields provided for update' });
  }

  let fields = [];
  let values = [];
  for (const [key, value] of Object.entries(updates)) {
    fields.push(`${key} = ?`);
    values.push(value.trim());
  }
  values.push(id);

  let conn;
    conn = await pool.getConnection();
    await conn.query(`UPDATE foods SET ${fields.join(', ')} WHERE ITEM_ID = ?`, values);
    res.json({ message: `Food item ${id} partially updated` });
});

/**
 * @swagger
 * /foods/{id}:
 *   patch:
 *     description: Updates one or more fields of a food item by ID
 *     produces:
 *         - application/json
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               ITEM_NAME:
 *                 type: string
 *               ITEM_UNIT:
 *                 type: string
 *               COMPANY_ID:
 *                 type: string
 *     responses:
 *       200:
 *         description: Food item partially updated
 */

app.delete('/foods/:id', async (req, res) => {
  const { id } = req.params;
  let conn;
    conn = await pool.getConnection();
    await conn.query('DELETE FROM foods WHERE ITEM_ID = ?', [id]);
    res.json({ message: `Food item ${id} deleted successfully` });
});

/**
 * @swagger
 * /foods/{id}:
 *   delete:
 *     description: Removes a food item by its ID
 *     produces:
 *         - application/json
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Food item deleted successfully
 */

app.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`);
});
